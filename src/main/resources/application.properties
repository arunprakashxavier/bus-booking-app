# Spring Boot Application Name
spring.application.name=busapp

# Server Port Configuration
# Render provides a PORT environment variable. We fall back to 8080 for local development.
server.port=${PORT:8080}

# =====================================================================================
#  DATABASE CONFIGURATION (PostgreSQL - Using Render's DATABASE_URL)
# =====================================================================================
# For Render, these variables will be automatically injected when you link a Render PostgreSQL database.
# Ensure your Render PostgreSQL database is configured to use SSL if required (Render usually defaults to sslmode=require).
spring.datasource.url=jdbc:${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# =====================================================================================
#  JPA & HIBERNATE CONFIGURATION
# =====================================================================================
# Use 'validate' with Flyway to ensure entities match the Flyway-managed schema.
# For production, 'validate' is safer than 'update' to prevent accidental schema changes.
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# =====================================================================================
#  FLYWAY DATABASE MIGRATION CONFIGURATION
# =====================================================================================
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration

# =====================================================================================
#  THYMELEAF (TEMPLATE ENGINE) CONFIGURATION
# =====================================================================================
spring.thymeleaf.cache=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# =====================================================================================
#  SPRINGDOC OPENAPI (SWAGGER UI) CONFIGURATION
# =====================================================================================
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
# To disable Swagger UI in production for security, set: springdoc.swagger-ui.enabled=false
# Consider enabling this only for specific environments or IP ranges if exposed publicly.

# =====================================================================================
#  JWT (JSON WEB TOKEN) CONFIGURATION
# =====================================================================================
# IMPORTANT: For production, set JWT_SECRET as an environment variable on Render.
app.jwtSecret=${JWT_SECRET}
# JWT_EXPIRATION_MS is in milliseconds. 3600000 ms = 1 hour.
app.jwtExpirationMs=${JWT_EXPIRATION_MS:3600000}

# =====================================================================================
#  STRIPE API KEYS & WEBHOOK CONFIGURATION
# =====================================================================================
# IMPORTANT: For production, set these as environment variables on Render.
# NO FALLBACKS ARE PROVIDED HERE TO PREVENT ACCIDENTAL COMMITS OF SECRETS.
stripe.publishable.key=${STRIPE_PUBLISHABLE_KEY}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}
stripe.secret.key=${STRIPE_SECRET_KEY}

# =====================================================================================
#  EMAIL CONFIGURATION (Using Environment Variables)
# =====================================================================================
# IMPORTANT: For production, set these as environment variables on Render.
# Fallbacks for host/port are acceptable for local development if you don't use a .env file.
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# =====================================================================================
#  SPRING BOOT ACTUATOR CONFIGURATION
# =====================================================================================
# Expose only 'health' endpoint by default.
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=when-authorized

# =====================================================================================
#  LOGGING CONFIGURATION
# =====================================================================================
# Default logging level for the application root.
logging.level.root=INFO

# Specific logging levels for your application packages.
logging.level.com.guvi.busapp=INFO

# Logging levels for Spring Framework packages.
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=INFO

# Logging levels for Hibernate (SQL and parameters).
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql=WARN

# Logging level for Flyway.
logging.level.org.flywaydb=INFO

# Local development logging (optional, for application-dev.properties)
# logging.level.root=DEBUG
# logging.level.com.guvi.busapp=DEBUG
# logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.security=DEBUG
# logging.level.org.hibernate.SQL=DEBUG
# logging.level.org.hibernate.type.descriptor.sql=TRACE

# To log to a file (optional, Render usually handles log aggregation)
# logging.file.name=logs/busapp.log
# logging.file.path=./logs# Spring Boot Application Name
#spring.application.name=busapp
#
## Server Port Configuration
## Render provides a PORT environment variable. We fall back to 8080 for local development.
#server.port=${PORT:8080}
#
## =====================================================================================
##  DATABASE CONFIGURATION (PostgreSQL - Using Render's DATABASE_URL)
## =====================================================================================
## For Render, these variables will be automatically injected when you link a Render PostgreSQL database.
## Ensure your Render PostgreSQL database is configured to use SSL if required (Render usually defaults to sslmode=require).
#spring.datasource.url=${DATABASE_URL}
#spring.datasource.username=${DATABASE_USERNAME}
#spring.datasource.password=${DATABASE_PASSWORD}
#spring.datasource.driver-class-name=org.postgresql.Driver
#
## =====================================================================================
##  JPA & HIBERNATE CONFIGURATION
## =====================================================================================
## Use 'validate' with Flyway to ensure entities match the Flyway-managed schema.
## For production, 'validate' is safer than 'update' to prevent accidental schema changes.
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.show-sql=false
#spring.jpa.properties.hibernate.format_sql=false
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#
## =====================================================================================
##  FLYWAY DATABASE MIGRATION CONFIGURATION
## =====================================================================================
#spring.flyway.enabled=true
#spring.flyway.locations=classpath:db/migration
#
## =====================================================================================
##  THYMELEAF (TEMPLATE ENGINE) CONFIGURATION
## =====================================================================================
#spring.thymeleaf.cache=true
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#
## =====================================================================================
##  SPRINGDOC OPENAPI (SWAGGER UI) CONFIGURATION
## =====================================================================================
#springdoc.api-docs.path=/api-docs
#springdoc.swagger-ui.path=/swagger-ui.html
## To disable Swagger UI in production for security, set: springdoc.swagger-ui.enabled=false
## Consider enabling this only for specific environments or IP ranges if exposed publicly.
#
## =====================================================================================
##  JWT (JSON WEB TOKEN) CONFIGURATION
## =====================================================================================
## IMPORTANT: For production, set JWT_SECRET as an environment variable on Render.
#app.jwtSecret=${JWT_SECRET}
## JWT_EXPIRATION_MS is in milliseconds. 3600000 ms = 1 hour.
#app.jwtExpirationMs=${JWT_EXPIRATION_MS:3600000}
#
## =====================================================================================
##  STRIPE API KEYS & WEBHOOK CONFIGURATION
## =====================================================================================
## IMPORTANT: For production, set these as environment variables on Render.
## NO FALLBACKS ARE PROVIDED HERE TO PREVENT ACCIDENTAL COMMITS OF SECRETS.
#stripe.publishable.key=${STRIPE_PUBLISHABLE_KEY}
#stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}
#stripe.secret.key=${STRIPE_SECRET_KEY}
#
## =====================================================================================
##  EMAIL CONFIGURATION (Using Environment Variables)
## =====================================================================================
## IMPORTANT: For production, set these as environment variables on Render.
## Fallbacks for host/port are acceptable for local development if you don't use a .env file.
#spring.mail.host=${MAIL_HOST:smtp.gmail.com}
#spring.mail.port=${MAIL_PORT:587}
#spring.mail.username=${MAIL_USERNAME}
#spring.mail.password=${MAIL_PASSWORD}
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true
#
## =====================================================================================
##  SPRING BOOT ACTUATOR CONFIGURATION
## =====================================================================================
## Expose only 'health' endpoint by default.
#management.endpoints.web.exposure.include=health
#management.endpoint.health.show-details=when-authorized
#
## =====================================================================================
##  LOGGING CONFIGURATION
## =====================================================================================
## Default logging level for the application root.
#logging.level.root=INFO
#
## Specific logging levels for your application packages.
#logging.level.com.guvi.busapp=INFO
#
## Logging levels for Spring Framework packages.
#logging.level.org.springframework.web=INFO
#logging.level.org.springframework.security=INFO
#
## Logging levels for Hibernate (SQL and parameters).
#logging.level.org.hibernate.SQL=WARN
#logging.level.org.hibernate.type.descriptor.sql=WARN
#
## Logging level for Flyway.
#logging.level.org.flywaydb=INFO
#
## Local development logging (optional, for application-dev.properties)
## logging.level.root=DEBUG
## logging.level.com.guvi.busapp=DEBUG
## logging.level.org.springframework.web=DEBUG
## logging.level.org.springframework.security=DEBUG
## logging.level.org.hibernate.SQL=DEBUG
## logging.level.org.hibernate.type.descriptor.sql=TRACE
#
## To log to a file (optional, Render usually handles log aggregation)
## logging.file.name=logs/busapp.log
## logging.file.path=./logs